+ : 43
- : 45
* : 42
/ : 47
int : int - 48
x : 120

signs = backup_sign.clone();
        val = backup_val.clone();
        for iter in 0..x_places.len() {
            let x_index : usize = x_places[iter] as usize;
            val[x_index] = i as f64;
        }
        println!("{:?}, {:?}, {:?}", &val, &signs, x_places);
        equilibre = 1;
        while iter < signs.len() {
            println!("{}, {}", signs[iter], signs[iter] == '*' || signs[iter] == '/');
            if signs[iter] == '^' {
                for i_ in 1..(val[iter + equilibre as usize] as i32) {
                    val[iter + equilibre as usize -1] *= val[iter + equilibre as usize -1];
                }
                val.remove(iter+equilibre as usize);
                equilibre-=1;
                println!("{:?}, {:?}, {:?} */", &val, &signs, x_places);
            } 
            iter +=1;
        }
        iter =0;
        while iter < signs.len() {
            println!("{}, {}", signs[iter], signs[iter] == '*' || signs[iter] == '/');
            if signs[iter] == '*' || signs[iter] == '/' {
                if signs[iter] == '*' {
                    val[iter + equilibre as usize -1] *= val[iter + equilibre as usize];
                    val.remove(iter+equilibre as usize);
                    equilibre-=1;
                    
                } else if signs[iter] == '/' {
                    val[iter + equilibre as usize -1] /= val[iter + equilibre as usize];
                        val.remove(iter+equilibre as usize);
                        equilibre-=1;
                }
                println!("{:?}, {:?}, {:?} */", &val, &signs, x_places);
            } 
            iter +=1;
        }
        iter = 0;
        while iter < signs.len() {
            if signs[iter] == '+' || signs[iter] == '-' {
                if signs[iter] == '+' {
                    val[0] += val[1];
                    val.remove(1);
                    equilibre-=1;
                } else if signs[iter] == '-' {
                    val[0] -= val[1];
                    val.remove(1);
                    equilibre-=1;
                }
                println!("{:?}, {:?}, {:?} +-", &val, &signs, x_places);
            }
            iter+=1;
            
        }
        iter = 0;
        println!("result pour x = {} : {:?}",i, val);
        
        if val.len() > 0 {
            if (val[0] as f64) == std::f64::INFINITY || (val[0] as f64) == std::f64::NEG_INFINITY{
                println!("val for {} is out of scope", i);
            } else {
                let tuple = (i as f32, val[0] as f32);
                res.push(tuple);
            }
        } else {
            let tuple = (i as f32, 0.0 as f32);
            res.push(tuple);
        }
    }